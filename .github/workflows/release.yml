name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: wakeup-linux-x86_64
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: wakeup-linux-aarch64
            
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: wakeup-macos-x86_64
            
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: wakeup-macos-aarch64
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: wakeup-windows-x86_64.exe
            
          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: wakeup-windows-aarch64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Create binary directory
      run: mkdir -p binaries

    - name: Copy binary (Unix)
      if: runner.os != 'Windows'
      run: cp target/${{ matrix.target }}/release/wakeup binaries/${{ matrix.name }}

    - name: Copy binary (Windows)
      if: runner.os == 'Windows'
      run: cp target/${{ matrix.target }}/release/wakeup.exe binaries/${{ matrix.name }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: binaries/${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create checksums
      run: |
        cd artifacts
        find . -type f -exec sha256sum {} \; > ../checksums.txt
        cd ..

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/wakeup-*
          checksums.txt
        body: |
          ## Release ${{ github.ref_name }}
          
          ### 下载说明
          - `wakeup-linux-x86_64`: Linux x86_64 版本
          - `wakeup-linux-aarch64`: Linux ARM64 版本
          - `wakeup-macos-x86_64`: macOS Intel 版本
          - `wakeup-macos-aarch64`: macOS Apple Silicon 版本
          - `wakeup-windows-x86_64.exe`: Windows x86_64 版本
          - `wakeup-windows-aarch64.exe`: Windows ARM64 版本
          
          ### 安装方法
          1. 下载对应平台的二进制文件
          2. 赋予执行权限 (Unix系统): `chmod +x wakeup-*`
          3. 将文件移动到 PATH 目录中 (可选)
          
          ### 校验和
          请使用 `checksums.txt` 文件验证下载文件的完整性。
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check